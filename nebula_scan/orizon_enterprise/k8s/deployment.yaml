# Kubernetes Deployment for Orizon Enterprise
# Production-ready configuration with auto-scaling

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: orizon-enterprise

---
# ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: orizon-config
  namespace: orizon-enterprise
data:
  ENVIRONMENT: "production"
  DEBUG: "false"
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "orizon_enterprise"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  LOG_LEVEL: "INFO"
  ENABLE_PROMETHEUS: "true"

---
# Secret for Sensitive Data
apiVersion: v1
kind: Secret
metadata:
  name: orizon-secrets
  namespace: orizon-enterprise
type: Opaque
stringData:
  POSTGRES_USER: "orizon"
  POSTGRES_PASSWORD: "change-me-in-production"
  REDIS_PASSWORD: "change-me-in-production"
  SECRET_KEY: "super-secret-jwt-key-change-me"
  VIRUSTOTAL_API_KEY: ""
  SECURITYTRAILS_API_KEY: ""
  CENSYS_ID: ""
  CENSYS_SECRET: ""
  SHODAN_API_KEY: ""

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: orizon-enterprise
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: orizon-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - orizon
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - orizon
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: orizon-enterprise
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: orizon-enterprise
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: orizon-enterprise
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  clusterIP: None

---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orizon-api
  namespace: orizon-enterprise
spec:
  replicas: 3
  selector:
    matchLabels:
      app: orizon-api
  template:
    metadata:
      labels:
        app: orizon-api
    spec:
      containers:
      - name: api
        image: orizon-enterprise:latest
        imagePullPolicy: Always
        command: ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: REDIS_PASSWORD
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: SECRET_KEY
        envFrom:
        - configMapRef:
            name: orizon-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: orizon-api-service
  namespace: orizon-enterprise
spec:
  selector:
    app: orizon-api
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP

---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orizon-celery-worker
  namespace: orizon-enterprise
spec:
  replicas: 5
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: worker
        image: orizon-enterprise:latest
        imagePullPolicy: Always
        command: ["celery", "-A", "workers.celery_app", "worker", "--loglevel=info", "--concurrency=10"]
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: REDIS_PASSWORD
        envFrom:
        - configMapRef:
            name: orizon-config
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"

---
# Celery Beat Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orizon-celery-beat
  namespace: orizon-enterprise
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
    spec:
      containers:
      - name: beat
        image: orizon-enterprise:latest
        imagePullPolicy: Always
        command: ["celery", "-A", "workers.celery_app", "beat", "--loglevel=info"]
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: orizon-secrets
              key: REDIS_PASSWORD
        envFrom:
        - configMapRef:
            name: orizon-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
# Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: orizon-api-hpa
  namespace: orizon-enterprise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: orizon-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for Workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: orizon-worker-hpa
  namespace: orizon-enterprise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: orizon-celery-worker
  minReplicas: 5
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
